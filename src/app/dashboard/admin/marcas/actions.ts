
'use server';

import MarcaManager from '@/marcaManager';
import type { MarcaVehiculo, NewMarcaData, UpdateMarcaData, ModeloVehiculo } from '@/lib/types';
// Ya no se importa ObjectId de mongodb aquí.

/**
 * Interface for the result of server actions.
 * @template T The type of data returned on success.
 */
interface ActionResult<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

/**
 * Serializes a MarcaVehiculo object to ensure it matches the client-side expected type.
 * Assumes that the manager methods have already converted MongoDB ObjectIds to strings.
 * @param {any} marcaFromDb - The raw marca object, ideally with _id already as a string.
 * @returns {MarcaVehiculo} The serialized marca object.
 */
function serializeMarca(marcaFromDb: any): MarcaVehiculo {
  // El manager ya debería haber convertido _id a string y los idModelo también.
  // Esta función ahora sirve más como una afirmación de tipo y para asegurar la estructura.
  return {
    ...marcaFromDb,
    // _id ya debería ser un string desde el manager.
    // modelos ya debería tener idModelo como string desde el manager.
    modelos: marcaFromDb.modelos?.map((modelo: any) => ({
      ...modelo,
      // idModelo ya es un string (ObjectId hex string) desde el manager.
    })) || [],
  } as MarcaVehiculo;
}

/**
 * Serializes an array of MarcaVehiculo objects.
 * @param {any[]} marcasFromDb - Array of raw marca objects from MongoDB.
 * @returns {MarcaVehiculo[]} Array of serialized marca objects.
 */
function serializeMarcas(marcasFromDb: any[]): MarcaVehiculo[] {
  return marcasFromDb.map(serializeMarca);
}

/**
 * Server Action to get all marcas.
 * @returns {Promise<ActionResult<MarcaVehiculo[]>>} Result object with an array of marcas or an error.
 */
export async function getAllMarcasAction(): Promise<ActionResult<MarcaVehiculo[]>> {
  const marcaManager = new MarcaManager();
  try {
    // El método getAllMarcas del manager ya devuelve _id como string.
    const marcasFromDBRaw = await marcaManager.getAllMarcas();
    const marcasForClient = serializeMarcas(marcasFromDBRaw); // Asegura consistencia
    return { success: true, data: marcasForClient };
  } catch (error) {
    console.error("Server action getAllMarcasAction error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Error desconocido al obtener marcas." };
  }
}

/**
 * Server Action to create a new marca.
 * The `_id` of the marca is generated by MongoDB.
 * @param {NewMarcaData} marcaData - Data for the new marca (marca name, optional modelos).
 * @returns {Promise<ActionResult<{ marcaId: string | null }>>} Result object with the new marca's MongoDB _id (as string) or an error.
 */
export async function createMarcaAction(marcaData: NewMarcaData): Promise<ActionResult<{ marcaId: string | null }>> {
  const marcaManager = new MarcaManager();
  try {
    // El método createMarca del manager ahora devuelve el _id (string) o null.
    const newMarcaIdString = await marcaManager.createMarca(marcaData);
    if (newMarcaIdString) {
      return {
        success: true,
        message: 'Marca creada exitosamente.',
        data: {
          marcaId: newMarcaIdString, // Usar directamente el ID string.
        }
      };
    } else {
      return { success: false, error: 'No se pudo crear la marca.' };
    }
  } catch (error) {
    console.error("Server action createMarcaAction error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Error desconocido al crear la marca." };
  }
}

/**
 * Server Action to get a marca by its MongoDB _id (string).
 * @param {string} id - The MongoDB _id (as a hex string) of the marca.
 * @returns {Promise<ActionResult<MarcaVehiculo | null>>} Result object with the marca data or an error/message.
 */
export async function getMarcaByIdAction(id: string): Promise<ActionResult<MarcaVehiculo | null>> {
  const marcaManager = new MarcaManager();
  try {
    // El método getMarcaById del manager espera un _id string y devuelve _id como string.
    const marcaFromDBRaw = await marcaManager.getMarcaById(id);
    if (marcaFromDBRaw) {
      return { success: true, data: serializeMarca(marcaFromDBRaw) }; // Asegurar serialización consistente
    }
    return { success: true, data: null, message: "Marca no encontrada." };
  } catch (error) {
    console.error("Server action getMarcaByIdAction error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Error desconocido al obtener la marca." };
  }
}

/**
 * Server Action to update a marca.
 * @param {string} id - The MongoDB _id (as string) of the marca to update.
 * @param {UpdateMarcaData} updateData - Data to update (marca name).
 * @returns {Promise<ActionResult<null>>} Result object indicating success or error.
 */
export async function updateMarcaAction(id: string, updateData: UpdateMarcaData): Promise<ActionResult<null>> {
  const marcaManager = new MarcaManager();
  try {
    const success = await marcaManager.updateMarca(id, updateData);
    if (success) {
      return { success: true, message: 'Marca actualizada exitosamente.' };
    } else {
      const exists = await marcaManager.getMarcaById(id);
      if (!exists) return { success: false, error: 'No se pudo actualizar la marca: Marca no encontrada.'};
      return { success: true, message: 'Ningún cambio detectado en la marca.' };
    }
  } catch (error) {
    console.error("Server action updateMarcaAction error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Error desconocido al actualizar la marca." };
  }
}

/**
 * Server Action to delete a marca.
 * @param {string} id - The MongoDB _id (as string) of the marca to delete.
 * @returns {Promise<ActionResult<null>>} Result object indicating success or error.
 */
export async function deleteMarcaAction(id: string): Promise<ActionResult<null>> {
  const marcaManager = new MarcaManager();
  try {
    const success = await marcaManager.deleteMarca(id);
    if (success) {
      return { success: true, message: 'Marca eliminada exitosamente.' };
    } else {
      return { success: false, error: 'No se pudo eliminar la marca o no se encontró.' };
    }
  } catch (error) {
    console.error("Server action deleteMarcaAction error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Error desconocido al eliminar la marca." };
  }
}

// --- Modelo Actions ---

/**
 * Server Action to add a modelo to a marca.
 * El `idModelo` es generado por el manager como string ObjectId y devuelto.
 * @param {string} marcaId - El `_id` (string) de MongoDB de la marca padre.
 * @param {Omit<ModeloVehiculo, 'idModelo'>} modeloData - Datos para el nuevo modelo (nombre del modelo).
 * @returns {Promise<ActionResult<ModeloVehiculo>>} Result object con el nuevo modelo (incluyendo su `idModelo` generado) o un error.
 */
export async function addModeloToMarcaAction(marcaId: string, modeloData: Omit<ModeloVehiculo, 'idModelo'>): Promise<ActionResult<ModeloVehiculo>> {
    const marcaManager = new MarcaManager();
    try {
        // Validación básica para el nombre del modelo.
        if (!modeloData.modelo?.trim()) {
            return { success: false, error: "Nombre del Modelo es requerido."};
        }
        // El método del manager maneja la generación de ObjectId para idModelo y lo devuelve como string.
        const newModelo = await marcaManager.addModeloToMarca(marcaId, modeloData);
        if (newModelo) {
            // newModelo ya tiene idModelo como string (ObjectId hex string).
            return { success: true, message: "Modelo añadido exitosamente.", data: newModelo };
        } else {
            return { success: false, error: "No se pudo añadir el modelo a la marca." };
        }
    } catch (error) {
        console.error("Server action addModeloToMarcaAction error:", error);
        return { success: false, error: error instanceof Error ? error.message : "Error desconocido al añadir modelo."};
    }
}

/**
 * Server Action to update a modelo within a marca.
 * @param {string} marcaId - El `_id` (string) de MongoDB de la marca padre.
 * @param {string} idModelo - El ObjectId string del modelo a actualizar.
 * @param {Partial<Omit<ModeloVehiculo, 'idModelo'>>} modeloUpdateData - Datos a actualizar (nombre del modelo).
 * @returns {Promise<ActionResult<null>>} Result object indicando éxito o error.
 */
export async function updateModeloInMarcaAction(marcaId: string, idModelo: string, modeloUpdateData: Partial<Omit<ModeloVehiculo, 'idModelo'>>): Promise<ActionResult<null>> {
    const marcaManager = new MarcaManager();
    try {
        // Validación básica para el nombre del modelo si se proporciona.
        if (modeloUpdateData.modelo !== undefined && !modeloUpdateData.modelo?.trim()) {
             return { success: false, error: "El nombre del modelo no puede estar vacío."};
        }
        const success = await marcaManager.updateModeloInMarca(marcaId, idModelo, modeloUpdateData);
        if (success) {
            return { success: true, message: "Modelo actualizado exitosamente." };
        } else {
            // Podría significar que el modelo/marca no se encontró, o que no hubo cambios reales.
            return { success: false, error: "No se pudo actualizar el modelo o no se encontró/modificó." };
        }
    } catch (error) {
        console.error("Server action updateModeloInMarcaAction error:", error);
        return { success: false, error: error instanceof Error ? error.message : "Error desconocido al actualizar modelo."};
    }
}

/**
 * Server Action to remove a modelo from a marca.
 * @param {string} marcaId - El `_id` (string) de MongoDB de la marca padre.
 * @param {string} idModelo - El ObjectId string del modelo a eliminar.
 * @returns {Promise<ActionResult<null>>} Result object indicando éxito o error.
 */
export async function removeModeloFromMarcaAction(marcaId: string, idModelo: string): Promise<ActionResult<null>> {
    const marcaManager = new MarcaManager();
    try {
        const success = await marcaManager.removeModeloFromMarca(marcaId, idModelo);
        if (success) {
            return { success: true, message: "Modelo eliminado exitosamente." };
        } else {
            return { success: false, error: "No se pudo eliminar el modelo de la marca." };
        }
    } catch (error) {
        console.error("Server action removeModeloFromMarcaAction error:", error);
        return { success: false, error: error instanceof Error ? error.message : "Error desconocido al eliminar modelo."};
    }
}


/**
 * Server Action to get modelos for a specific marca, returning only idModelo and nombre.
 * Used for populating select/dropdown components in the UI.
 * @param {string} marcaId - The MongoDB _id (string) of the marca.
 * @returns {Promise<ActionResult<Pick<ModeloVehiculo, 'idModelo' | 'modelo'>[]>>} Result object with an array of modelos (idModelo, modelo) or an error.
 */
export async function getModelosByMarcaAction(marcaId: string): Promise<ActionResult<Pick<ModeloVehiculo, 'idModelo' | 'modelo'>[]>> {
 const marcaManager = new MarcaManager();
 try {
    if (!marcaId) {
        return { success: false, error: "Se requiere el ID de la marca." };
    }
    // El manager devuelve _id y idModelo como strings.
    const marca = await marcaManager.getMarcaById(marcaId);
    if (marca && marca.modelos) {
        // Mapear a la estructura deseada para el componente select.
        return { success: true, data: marca.modelos.map(mod => ({ idModelo: mod.idModelo, modelo: mod.modelo })) };
    }
    return { success: true, data: [], message: "Marca no encontrada o sin modelos." };
 } catch (error) {
    console.error("Server action getModelosByMarcaAction error:", error);
    return { success: false, error: error instanceof Error ? error.message : "Error desconocido al obtener modelos." };
 }
}
